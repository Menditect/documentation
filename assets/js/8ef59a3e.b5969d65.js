"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[132],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=d(n),g=i,f=u["".concat(l,".").concat(g)]||u[g]||p[g]||r;return n?a.createElement(f,s(s({ref:t},c),{},{components:n})):a.createElement(f,s({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:i,s[1]=o;for(var d=2;d<r;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2285:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:3},s="Frontend Testing Challenges Solved by Menditect",o={unversionedId:"frontend-test-challenges-solved-by-mta",id:"frontend-test-challenges-solved-by-mta",title:"Frontend Testing Challenges Solved by Menditect",description:"Fragility",source:"@site/additional/05-knowledge-base/frontend-test-challenges-solved-by-mta.md",sourceDirName:".",slug:"/frontend-test-challenges-solved-by-mta",permalink:"/additional/knowledge-base/frontend-test-challenges-solved-by-mta",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Frontend Testing for Mendix Devs",permalink:"/additional/knowledge-base/frontend-testing-for-mendix-devs"},next:{title:"Mendix introduction for testers",permalink:"/additional/knowledge-base/mendix-for-testers"}},l={},d=[{value:"Fragility",id:"fragility",level:2},{value:"MTA&#39;s solution for robust locators",id:"mtas-solution-for-robust-locators",level:3},{value:"Flakiness",id:"flakiness",level:2},{value:"MTA&#39;s solution for flaky test runs",id:"mtas-solution-for-flaky-test-runs",level:3}],c={toc:d},u="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"frontend-testing-challenges-solved-by-menditect"},"Frontend Testing Challenges Solved by Menditect"),(0,i.kt)("h2",{id:"fragility"},"Fragility"),(0,i.kt)("p",null,"Fragility is the problem of keeping Locators up-to-date when (Pages in) the App under test is constantly being changed. If the Page structure changes, the location of Widgets also changes."),(0,i.kt)("h3",{id:"mtas-solution-for-robust-locators"},"MTA's solution for robust locators"),(0,i.kt)("p",null,"Instead of scanning the generated HTML in the page and building a page object model from this, manually or assisted by AI, MTA 3.0 uses the page structure and widgets from the Mendix model to create highly reliable locators. This approach ensures that the locators always correspond to the underlying Mendix model and makes the use and updates for these locators as easy as possible. How does MTA 3.0 do this?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"MTA generates locators directly from the widgets in the ",(0,i.kt)("strong",{parentName:"li"},"Mendix model"),". Generated locators, based on the Mendix model structure, are a robust alternative for data-test-id locators, because they are generated by the Mendix platform and identical for all widgets of the same widget type. MTA supports all standard Mendix platform supported widgets and is extensible with your own custom built Mendix pluggable widgets."),(0,i.kt)("li",{parentName:"ul"},"MTA can test the ",(0,i.kt)("strong",{parentName:"li"},"conditional visibility")," of widgets: by setting users (user role) and test data (data driven testing) MTA is capable of asserting whether a widget should be visible or not and therefore it can test the conditional visibility of widgets of your Mendix app"),(0,i.kt)("li",{parentName:"ul"},"MTA only lists ",(0,i.kt)("strong",{parentName:"li"},"locatable")," widgets: MTA intelligently identifies which widgets within your page structure are reliably locatable and which are not."),(0,i.kt)("li",{parentName:"ul"},"MTA provides visual feedback for ",(0,i.kt)("strong",{parentName:"li"},"ambiguous Locators"),": To aid testers, MTA provides visual feedback for widgets that might have more than one potential locator, guiding them to choose the most robust option."),(0,i.kt)("li",{parentName:"ul"},"MTA provides a Mendix widget inspector: By utilizing the Mendix Widget Inspector (available for Chrome and Firefox), MTA can detect visible widgets, their unique names, and their ",(0,i.kt)("strong",{parentName:"li"},"multiplicity")," on a specific page."),(0,i.kt)("li",{parentName:"ul"},"MTA detects the structure of ",(0,i.kt)("strong",{parentName:"li"},"nested widgets"),": MTA leverages page structure and widget types to detect nested widgets that require a more advanced and resilient locator strategy.\nSelf healing of tests with MTA"),(0,i.kt)("li",{parentName:"ul"},"MTA provinces ",(0,i.kt)("strong",{parentName:"li"},"self-healing")," widget name changes: MTA automatically adapts to and \u201cself-heals\u201d tests when widget names are changed during application updates, preventing unnecessary test failures."),(0,i.kt)("li",{parentName:"ul"},"MTA ",(0,i.kt)("strong",{parentName:"li"},"detects removed widgets"),": MTA can detect when widgets have been removed from the application, allowing for proactive test suite adjustments.\nIn a future release MTA will include the ability to self-heal locators for nested widgets where the nesting structure has changed.")),(0,i.kt)("h2",{id:"flakiness"},"Flakiness"),(0,i.kt)("p",null,"Flakiness is the problem that the same test can either fail or pass, without any changes in the software code. If Widgets take longer to render (wait condition dependency) or data is still being processed (race condition), the result can vary."),(0,i.kt)("h3",{id:"mtas-solution-for-flaky-test-runs"},"MTA's solution for flaky test runs"),(0,i.kt)("p",null,"MTA 3.0 builds upon Playwright\u2019s capabilities and introduces specific features to enhance test reliability and eliminate flakiness. "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Intelligent wait conditions")," from Playwright: MTA leverages Playwright\u2019s intelligent wait conditions, which automatically wait for elements to be actionable before interacting with them, significantly reducing timing-related flakiness."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Default visibility check"),": For each locator test step, MTA performs a default visibility check (which can be toggled off if needed). This allows for easy detection of missing element visibility, preventing interactions with hidden or unrendered elements."),(0,i.kt)("li",{parentName:"ul"},"Serial test execution on shared environments: To ",(0,i.kt)("strong",{parentName:"li"},"prevent race conditions"),", MTA recommends and facilitates running tests serially (not in parallel) on the same test environment, ensuring predictable outcomes."),(0,i.kt)("li",{parentName:"ul"},"Test ",(0,i.kt)("strong",{parentName:"li"},"variations")," via backend test scripts: MTA enables the execution of test variations or data setup/teardown via faster and more robust backend tests, reducing the reliance on slower and larger frontend test scripts. These backend and frontend actions can be mixed in scripts wherever this is beneficial for executing a faster and more robust test script.")))}p.isMDXComponent=!0}}]);