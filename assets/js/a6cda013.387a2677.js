"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2182],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(r),f=a,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||s;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var c=2;c<s;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2650:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var n=r(3117),a=r(102),s=(r(7294),r(3905)),i=["components"],o={},l="Process testing",c={unversionedId:"bestpractice/processtest",id:"bestpractice/processtest",title:"Process testing",description:"A process test consists of several steps, where multiple functions of the software are tested. The user and the system interact, and in some cases multiple users or integrating external systems are involved. Part of the process test could be verifying some deliverable as part of the result.",source:"@site/docs/bestpractice/processtest.md",sourceDirName:"bestpractice",slug:"/bestpractice/processtest",permalink:"/bestpractice/processtest",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Unit testing",permalink:"/explanatory/unit-testing"},next:{title:"Unit testing",permalink:"/bestpractice/unittest"}},u=[{value:"Feedback?",id:"feedback",children:[],level:2}],p={toc:u};function d(e){var t=e.components,r=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"process-testing"},"Process testing"),(0,s.kt)("p",null,"A process test consists of several steps, where multiple functions of the software are tested. The user and the system interact, and in some cases multiple users or integrating external systems are involved. Part of the process test could be verifying some deliverable as part of the result."),(0,s.kt)("p",null,"There may also be one or more processes in any Mendix App that are business-critical and therefore need to be regression-tested. "),(0,s.kt)("p",null,"A process test generally creates data that can be visually inspected in the Mendix app being tested. However part of the test should be cleaning up the data, to avoid uncontrolled growth of the data generated by the test, and also to avoid unique constraint runtime errors. "),(0,s.kt)("p",null,"A process test in MTA typically looks like this:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"multiple Test Suites in one Test Configuration;"),(0,s.kt)("li",{parentName:"ul"},"the first Test Suite cleans up both masterdata and process data generated from the previous run of the Test Configuration;"),(0,s.kt)("li",{parentName:"ul"},"the second Test Suite creates masterdata;"),(0,s.kt)("li",{parentName:"ul"},"subsequent Test Suites deal with the actual process test;"),(0,s.kt)("li",{parentName:"ul"},"in these Test Suites, one or more Test Cases where each test case represents a user or component transaction, using data from the database from the previous Test Case;"),(0,s.kt)("li",{parentName:"ul"},"in these Test Cases, alternating Object and Microflow Teststeps, each using data from the previous one;"),(0,s.kt)("li",{parentName:"ul"},"continuous usage of asserts for checking the results;"),(0,s.kt)("li",{parentName:"ul"},"Data Variation to drive different scenario's of the process.")),(0,s.kt)("p",null,"Below steps are optional, not mandatory, but will make it much easier to process test."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Use the ",(0,s.kt)("strong",{parentName:"li"},"MTA recorder")," as a starting point. Read more about this in the How To section."),(0,s.kt)("li",{parentName:"ul"},"Focus on building the Test Suites where the actual test is performed ",(0,s.kt)("strong",{parentName:"li"},"first"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Check results")," in the Mendix app often, to check the progress."),(0,s.kt)("li",{parentName:"ul"},"Then, ",(0,s.kt)("strong",{parentName:"li"},"create masterdata")," from scratch as much as possible, rather than reusing existing. This is to make sure the test always runs and there are no dependencies from the environment where the test is executed on."),(0,s.kt)("li",{parentName:"ul"},"After that, always put a Test Suite to clean up, ",(0,s.kt)("strong",{parentName:"li"},"before")," the Test Suites for actual testing are executed. This makes it possible to visually inspect the result in the Mendix app being tested."),(0,s.kt)("li",{parentName:"ul"},"When cleaning up, preferably use ",(0,s.kt)("strong",{parentName:"li"},"existing (microflow) logic")," to delete, rather than Delete Object Teststeps. This is to make sure associated objects or data generated from Domain Model Event handlers is also deleted."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Include asserts")," to check the results of attribute values. Also create Object Count asserts after each Retrieve Object Teststep and each Microflow Teststep that returns an object or List."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Create datavariation"),", to test with different values of the attributes. Make sure to also include the asserts in the datavariation. And finally, when creating multiple columns (variations) in the datavariation, only change one attribute value per variation. ")),(0,s.kt)("h2",{id:"feedback"},"Feedback?"),(0,s.kt)("p",null,"Missing anything? ",(0,s.kt)("a",{parentName:"p",href:"mailto:support@menditect.com"},"Let us know!")),(0,s.kt)("p",null,"Last updated 21 april 2022"))}d.isMDXComponent=!0}}]);