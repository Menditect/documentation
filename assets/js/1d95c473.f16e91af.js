"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4332],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(f,r(r({ref:t},p),{},{components:n})):a.createElement(f,r({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3685:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const o={},r="Handle files",l={unversionedId:"tips-and-tricks/handle-files",id:"tips-and-tricks/handle-files",title:"Handle files",description:"MTA does not (yet) allow uploading a FileDocument into your Test App.",source:"@site/additional/01-howtos/08-tips-and-tricks/handle-files.md",sourceDirName:"08-tips-and-tricks",slug:"/tips-and-tricks/handle-files",permalink:"/additional/howtos/tips-and-tricks/handle-files",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Assert on an Exception",permalink:"/additional/howtos/tips-and-tricks/assert-exception"},next:{title:"Migrate Mendix Unit Tests",permalink:"/additional/howtos/tips-and-tricks/migrate-unit-tests"}},s={},c=[{value:"Duplicate existing FileDocument",id:"duplicate-existing-filedocument",level:2},{value:"Create FileDocument from a Base64 string",id:"create-filedocument-from-a-base64-string",level:2},{value:"Feedback?",id:"feedback",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...o}=e;return(0,i.kt)(u,(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"handle-files"},"Handle files"),(0,i.kt)("p",null,"MTA does not (yet) allow uploading a ",(0,i.kt)("inlineCode",{parentName:"p"},"FileDocument")," into your Test App."),(0,i.kt)("p",null,"This also means, that using Binary attributes is not (yet) supported."),(0,i.kt)("p",null,"However, there are some ways to include the Uploading and Downloading of files into your test process.\nUsing a ",(0,i.kt)("a",{parentName:"p",href:"../design-tests/test-ui-with-mta"},"UI testscript")," is the recommended approach."),(0,i.kt)("p",null,"It is also possible to use an extension microflow inside the Test App to create the files. "),(0,i.kt)("h2",{id:"duplicate-existing-filedocument"},"Duplicate existing FileDocument"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create (if not yet exists) an MTA extension module in the tested App."),(0,i.kt)("li",{parentName:"ul"},"Add a User to the module."),(0,i.kt)("li",{parentName:"ul"},"Add an entity that inherits from FileDocument or Image, for instance ",(0,i.kt)("inlineCode",{parentName:"li"},"MyPdfFile"),"."),(0,i.kt)("li",{parentName:"ul"},"Give the User full access to that entity."),(0,i.kt)("li",{parentName:"ul"},"Build a NewEdit Page to upload files of this type."),(0,i.kt)("li",{parentName:"ul"},"Create a microflow with only a single (Java) Duplicate File Document action from the Community Commons module. It should look like this:\n",(0,i.kt)("img",{alt:"Duplicate File Document microflow",src:n(6863).Z,width:"418",height:"220"}))),(0,i.kt)("p",null,"Now, it is possible to use this pattern in a Test Case, to test processes that require a file:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Teststep that Creates an empty filedocument as used in the tested process (for example, a 'TemplateDocument' as is used in the Excel Importer)."),(0,i.kt)("li",{parentName:"ol"},"Persist (to ensure the object is saved to the database, otherwise the Java action won't work)."),(0,i.kt)("li",{parentName:"ol"},"Teststep that Retrieves the filedocument from the MTA extension module's entity."),(0,i.kt)("li",{parentName:"ol"},"Microflow call to the abovementioned microflow with parameters: teststep 1 as Target, and teststep 3 as Source."),(0,i.kt)("li",{parentName:"ol"},"Other logic to perform the actual test."),(0,i.kt)("li",{parentName:"ol"},"Optional delete logic to clean up.")),(0,i.kt)("h2",{id:"create-filedocument-from-a-base64-string"},"Create FileDocument from a Base64 string"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create (if not yet exists) an MTA extension module in the tested App."),(0,i.kt)("li",{parentName:"ul"},"Add a User to the module."),(0,i.kt)("li",{parentName:"ul"},"Add an entity that inherits from FileDocument or Image, for instance ",(0,i.kt)("inlineCode",{parentName:"li"},"MyImage"),"."),(0,i.kt)("li",{parentName:"ul"},"Give the User full access to that entity."),(0,i.kt)("li",{parentName:"ul"},"Create a microflow that decodes a String to a FileDocument using the (Java) Base64 decode to file action from the Community Commons module. It should look like this:\n",(0,i.kt)("img",{alt:"Create File from Base64 String",src:n(473).Z,width:"740",height:"167"}))),(0,i.kt)("p",null,"An example String that decodes into the Menditect Logo can be found ",(0,i.kt)("a",{target:"_blank",href:n(4601).Z},"here"),"."),(0,i.kt)("h2",{id:"feedback"},"Feedback?"),(0,i.kt)("p",null,"Missing anything? ",(0,i.kt)("a",{parentName:"p",href:"mailto:support@menditect.com"},"Let us know!")),(0,i.kt)("p",null,"Last updated 21 august 2023"))}d.isMDXComponent=!0},4601:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/menditectlogo-92d15285f64fccdd0e8605bec9a35078.txt"},6863:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/duplicate-filedoc-e9f06deb83737f1869e570e8c794fb31.png"},473:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/image-from-base64-c0608bec0dc4853b342b7634e0a7ac90.png"}}]);