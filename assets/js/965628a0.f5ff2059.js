"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1760],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var s=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,i=function(e,t){if(null==e)return{};var n,s,i={},a=Object.keys(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)n=a[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=s.createContext({}),u=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return s.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},h=s.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),h=i,g=d["".concat(l,".").concat(h)]||d[h]||p[h]||a;return n?s.createElement(g,r(r({ref:t},c),{},{components:n})):s.createElement(g,r({ref:t},c))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:i,r[1]=o;for(var u=2;u<a;u++)r[u]=n[u];return s.createElement.apply(null,r)}return s.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1159:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var s=n(7462),i=(n(7294),n(3905));const a={},r="Handle the results of a Test Run",o={unversionedId:"schedule-tests/cicd-result",id:"schedule-tests/cicd-result",title:"Handle the results of a Test Run",description:"Definition",source:"@site/additional/01-howtos/07-schedule-tests/04-cicd-result.md",sourceDirName:"07-schedule-tests",slug:"/schedule-tests/cicd-result",permalink:"/additional/howtos/schedule-tests/cicd-result",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Automate pipeline",permalink:"/additional/howtos/schedule-tests/cicd-flow"},next:{title:"Assert on an Exception",permalink:"/additional/howtos/tips-and-tricks/assert-exception"}},l={},u=[{value:"Definition",id:"definition",level:2},{value:"1. View results in MTA",id:"1-view-results-in-mta",level:2},{value:"2. Download results in CI/CD API",id:"2-download-results-in-cicd-api",level:2},{value:"3. Get realtime results in your own API endpoint",id:"3-get-realtime-results-in-your-own-api-endpoint",level:2},{value:"Configure Endpoint and Secret key",id:"configure-endpoint-and-secret-key",level:3},{value:"Receiving results",id:"receiving-results",level:3},{value:"Securing the connection",id:"securing-the-connection",level:3}],c={toc:u},d="wrapper";function p(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,s.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"handle-the-results-of-a-test-run"},"Handle the results of a Test Run"),(0,i.kt)("h2",{id:"definition"},"Definition"),(0,i.kt)("p",null,"This document describes the how to obtain results from an executed CI/CD testrun.\nThere are 3 ways to view results of a CI/CD testrun."),(0,i.kt)("h2",{id:"1-view-results-in-mta"},"1. View results in MTA"),(0,i.kt)("p",null,'To view the detailed results of a testrun that is executed from CI/CD Version 1, login on MTA, and navigate to "Ci/Cd runs". All the executed CI/CD testruns are listed here with their respective Execution ID, also the ones that were not successful.\nUsing the Details button it is possible to view the results of the testrun. Also testruns executed from CI/CD Version 2 are visible here.'),(0,i.kt)("h2",{id:"2-download-results-in-cicd-api"},"2. Download results in CI/CD API"),(0,i.kt)("p",null,"With the ",(0,i.kt)("a",{parentName:"p",href:"../../../api#get-testrun"},"Get testrun")," request in the CI/CD API it is possible to use your CI/CD pipeline or Test Management system to get the results, after the execution has finished."),(0,i.kt)("h2",{id:"3-get-realtime-results-in-your-own-api-endpoint"},"3. Get realtime results in your own API endpoint"),(0,i.kt)("p",null,"As of MTA version 2.0, it is possible to have MTA push the results after each Test Case run to your own hosted REST service. You need to tell MTA where to push the results, and provide a secret key that you should use to verify the source (MTA) upon receiving this push message.  "),(0,i.kt)("h3",{id:"configure-endpoint-and-secret-key"},"Configure Endpoint and Secret key"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Login to MTA as CI/CD user"),(0,i.kt)("li",{parentName:"ul"},"Open the Account Settings using the ",(0,i.kt)("i",{class:"fal fa-user-circle"})," button on the top right"),(0,i.kt)("li",{parentName:"ul"},"Enter the Endpoint and Secret key like this:")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Example config",src:n(6134).Z,width:"755",height:"149"})),(0,i.kt)("p",null,"Note that both fields are optional, but to make use of this functionality, both fields must have a value."),(0,i.kt)("h3",{id:"receiving-results"},"Receiving results"),(0,i.kt)("p",null,"To handle results, you should host a published REST service that allows anonymous access and contains a POST request on the location provided above, and is able to deal with this payload (JSON):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "ExecutionId": "2d0e47f7-f664-4d12-a27a-19ff4da319a5",\n    "TestConfigurationName": "Test",\n    "TestSuiteSequence": 1,\n    "TestSuiteName": "Test",\n    "TestCaseSequence": 1,\n    "TestCaseName": "Test",\n    "TestCaseRunResult": "Pass",\n    "TestCaseRunResultMessage": "",\n    "TestCaseRunUrl": "http://mta-menditect-9fo2p.mendixcloud.com/link/testcaserun/7",\n    "MtaUrl": "http://mta-menditect-9fo2p.mendixcloud.com/",\n    "ApplicationName": "MTA_Training_CarRental",\n    "ProjectId": "48224593-2187-448d-abe9-9202e1b3a870"\n}\n')),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The Timeout of the call to this Endpoint is set at 300 seconds. MTA will however not wait to continue the rest of the testrun. This means that results of the Test Cases may not be pushed in the right order. You can use the Sequences of the Test Suite and Test Case in the payload to adjust for this.")),(0,i.kt)("p",null,"Additionally, to make sure that you have all the results of a single CI/CD testrun ",(0,i.kt)("i",null,"and")," also that the testrun is finished, always use the MTA Get testruns result API as well."),(0,i.kt)("h3",{id:"securing-the-connection"},"Securing the connection"),(0,i.kt)("p",null,"When Using the Endpoint and Secret key, for each payload that gets pushed to the Endpoint, an HMAC will be generated, which then gets passed along as a header \u201cSignature\u201d with the request. The value of header \u201cSignature\u201d is Base64 encoded. The algorithm for generating a MAC is HMAC with SHA256. When comparing both signatures if they are equal, it is advisable to use a comparison function which is constant time to prevent time attacks (in Java, the function MessageDigest.isEqual is in constant time)."),(0,i.kt)("p",null,"You should write your own logic to compare the Signature against the Secret key, but if you are using Mendix, below is a Java code snippet that you can use."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import java.lang.*;\nimport com.mendix.systemwideinterfaces.core.IContext;\nimport com.mendix.webui.CustomJavaAction;\nimport java.util.Base64;\nimport java.security.MessageDigest;\nimport java.nio.charset.StandardCharsets;\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\n\npublic class signatureDecoder extends CustomJavaAction<java.lang.Boolean>\n{\n    private String signature;\n    private String payload;\n    private String secretKey;\n\n    public signatureDecoder(IContext context, String signature, String payload, String secretKey)\n    {\n        super(context);\n        this.signature = signature;\n        this.payload = payload;\n        this.secretKey = secretKey;\n    }\n\n    @java.lang.Override\n    public Boolean executeAction() throws Exception\n    {\n        // BEGIN USER CODE\n       String algorithm = "HmacSHA256";\n       SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getBytes(StandardCharsets.UTF_8), algorithm);\n       Mac mac = Mac.getInstance(algorithm);\n       mac.init(secretKeySpec);\n       byte[] result = mac.doFinal(payload.getBytes(StandardCharsets.UTF_8));\n       byte[] givenSignature = Base64.getDecoder().decode(signature.getBytes(StandardCharsets.UTF_8));   \n       boolean correct = MessageDigest.isEqual(result, givenSignature);\n       return correct;\n        // END USER CODE\n    }\n}\n')))}p.isMDXComponent=!0},6134:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/cicd-result-8f4348e2f9b46648e7f5074a5e2e4e3b.png"}}]);