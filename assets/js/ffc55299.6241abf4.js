"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[965],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var s=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,s)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,s,r=function(e,t){if(null==e)return{};var a,s,r={},n=Object.keys(e);for(s=0;s<n.length;s++)a=n[s],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(s=0;s<n.length;s++)a=n[s],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=s.createContext({}),u=function(e){var t=s.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=u(e.components);return s.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},d=s.forwardRef((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(a),h=r,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||n;return a?s.createElement(m,i(i({ref:t},c),{},{components:a})):s.createElement(m,i({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,i=new Array(n);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<n;u++)i[u]=a[u];return s.createElement.apply(null,i)}return s.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1383:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>n,metadata:()=>o,toc:()=>u});var s=a(7462),r=(a(7294),a(3905));const n={},i="Process testing",o={unversionedId:"processtest",id:"processtest",title:"Process testing",description:"Definition",source:"@site/additional/02-bestpractice/processtest.md",sourceDirName:".",slug:"/processtest",permalink:"/additional/bestpractice/processtest",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Best practice",permalink:"/additional/bestpractice/"},next:{title:"Record actions",permalink:"/additional/bestpractice/record-actions"}},l={},u=[{value:"Definition",id:"definition",level:2},{value:"Structure",id:"structure",level:2},{value:"Tips and tricks",id:"tips-and-tricks",level:2},{value:"Feedback?",id:"feedback",level:2}],c={toc:u};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,s.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"process-testing"},"Process testing"),(0,r.kt)("h2",{id:"definition"},"Definition"),(0,r.kt)("p",null,"A process test consists of several steps, where multiple functions of the software are tested. The user and the system interact, and in some cases multiple users or integrating external systems are involved. Part of the process test could be verifying some deliverable as part of the result."),(0,r.kt)("p",null,"There may also be one or more processes in any Mendix App that are business-critical and therefore need to be regression-tested. "),(0,r.kt)("p",null,"A process test generally creates data that can be visually inspected in the Mendix app being tested. However part of the test should be cleaning up the data, to avoid uncontrolled growth of the data generated by the test, and also to avoid unique constraint runtime errors. "),(0,r.kt)("h2",{id:"structure"},"Structure"),(0,r.kt)("p",null,"Recommended best practice is to structure a Process test into 3 parts:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Cleanup data, that is the result from a previous run, to ensure repeatability of the test script; "),(0,r.kt)("li",{parentName:"ol"},"Create data, that is necessary to run the test;"),(0,r.kt)("li",{parentName:"ol"},"The actual process test.")),(0,r.kt)("p",null,"Before choosing whether to create a separate Test Suite or Test Case for each part, some aspects need to be considered:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Test characteristics"),"\nThe type of process that needs to be tested will determine much of the structure in MTA. For instance, does the test represent a user flow in the Mendix frontend? Or is it testing a REST service? Or is the entire test executed in the backend? If the process follows a user flow, it is best to use the Recorder function to create a draft version, first. If multiple users are involved, make sure to use a new Test Case for each one, and to use the right username for the Test Cases."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Datavariation"),"\nDatavariation is defined on the Test Suite level. If the cleanup part only has to be executed once, but the other parts need to be executed multiple times using datavariation, it is wise to keep the two apart in separate Test Suites."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"In-memory data"),"\nAll the teststeps within a single Test Case can use data from a previous teststep without the need to save the data to the database. As soon as teststeps use data from a previous Test Case, the data needs to be saved. This means that when running in-memory is an important aspect, the parts sharing data should be in the same Test Case."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Reusability"),"\nTest Suites can be copied to other Test Configurations, and Test Cases to other Test Suites. When keeping Test Cases small, it is easier to reuse them across MTA."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Troubleshooting"),"\nSometimes when executing the Test Configuration it could stop halfway because of a technical error. In that scenario it is possible to restore the data, by executing just one of the Test Suites (or one Test Case) in the Test Configuration. This is described in the ",(0,r.kt)("a",{parentName:"p",href:"../howtos/isolate-test-case"},"Howto: Run a single Test Case"),"."),(0,r.kt)("p",null,"Above aspects taken into consideration, a process test in MTA typically looks like this:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"multiple Test Suites in one Test Configuration;"),(0,r.kt)("li",{parentName:"ul"},"the first Test Suite cleans up both masterdata and process data generated from the previous run of the Test Configuration;"),(0,r.kt)("li",{parentName:"ul"},"the second Test Suite creates masterdata;"),(0,r.kt)("li",{parentName:"ul"},"subsequent Test Suites deal with the actual process test;"),(0,r.kt)("li",{parentName:"ul"},"in these Test Suites, one or more Test Cases where each test case represents a user or component transaction, using data from the database from the previous Test Case;"),(0,r.kt)("li",{parentName:"ul"},"in these Test Cases, alternating Object and Microflow Teststeps, each using data from the previous one;"),(0,r.kt)("li",{parentName:"ul"},"continuous usage of asserts for checking the results;"),(0,r.kt)("li",{parentName:"ul"},"Data Variation to drive different scenario's of the process.")),(0,r.kt)("h2",{id:"tips-and-tricks"},"Tips and tricks"),(0,r.kt)("p",null,"Below steps are optional, not mandatory, but will make it much easier to process test."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use the ",(0,r.kt)("strong",{parentName:"li"},"MTA recorder")," as a starting point. Read more about this in the How To section."),(0,r.kt)("li",{parentName:"ul"},"Focus on building the Test Suites where the actual test is performed ",(0,r.kt)("strong",{parentName:"li"},"first"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Check results")," in the Mendix app often, to check the progress."),(0,r.kt)("li",{parentName:"ul"},"Then, ",(0,r.kt)("strong",{parentName:"li"},"create masterdata")," from scratch as much as possible, rather than reusing existing. This is to make sure the test always runs and there are no dependencies from the environment where the test is executed on."),(0,r.kt)("li",{parentName:"ul"},"After that, always put a Test Suite to clean up, ",(0,r.kt)("strong",{parentName:"li"},"before")," the Test Suites for actual testing are executed. This makes it possible to visually inspect the result in the Mendix app being tested."),(0,r.kt)("li",{parentName:"ul"},"When cleaning up, preferably use ",(0,r.kt)("strong",{parentName:"li"},"existing (microflow) logic")," to delete, rather than Delete Object Teststeps. This is to make sure associated objects or data generated from Domain Model Event handlers is also deleted."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Include asserts")," to check the results of attribute values. Also create Object Count asserts after each Retrieve Object Teststep and each Microflow Teststep that returns an object or List."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Create datavariation"),", to test with different values of the attributes. Make sure to also include the asserts in the datavariation. And finally, when creating multiple columns (variations) in the datavariation, only change one attribute value per variation. ")),(0,r.kt)("h2",{id:"feedback"},"Feedback?"),(0,r.kt)("p",null,"Missing anything? ",(0,r.kt)("a",{parentName:"p",href:"mailto:support@menditect.com"},"Let us know!")),(0,r.kt)("p",null,"Last updated 21 april 2022"))}p.isMDXComponent=!0}}]);